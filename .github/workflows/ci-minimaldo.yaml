name: CI MinimalDo

env:
  REGISTRY: ghcr.io
  REPOSITORY_OWNER: ${{ github.repository_owner }}

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - backend/**
      - frontend/**

jobs:
  changes:
    runs-on: ubuntu-homelab
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
      
      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'

  build-and-push:
    needs: changes
    runs-on: ubuntu-homelab
    permissions:
      contents: read
      packages: write  # This allows pushing to GHCR
    strategy:
      matrix:
        component:
          - name: backend
            working_dir: backend
            image_name: minimaldo-backend
          - name: frontend
            working_dir: frontend
            image_name: minimaldo-frontend
    steps:
      - name: Skip if no changes
        id: should_skip
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual trigger - building all components"
            echo "skip=false" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.component.name }}" = "backend" ] && [ "${{ needs.changes.outputs.backend }}" = "true" ]; then
            echo "Backend changes detected - building backend"
            echo "skip=false" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.component.name }}" = "frontend" ] && [ "${{ needs.changes.outputs.frontend }}" = "true" ]; then
            echo "Frontend changes detected - building frontend"
            echo "skip=false" >> $GITHUB_OUTPUT
          else
            echo "No changes detected for ${{ matrix.component.name }} - skipping"
            echo "skip=true" >> $GITHUB_OUTPUT
          fi

      - name: Checkout source
        if: steps.should_skip.outputs.skip != 'true'
        uses: actions/checkout@v4

      - name: Set commit ID
        if: steps.should_skip.outputs.skip != 'true'
        id: commit
        run: |
          echo "short_sha=main-$(git rev-parse --short HEAD)-$(date +%s)" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        if: steps.should_skip.outputs.skip != 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image - ${{ matrix.component.name }}
        if: steps.should_skip.outputs.skip != 'true'
        working-directory: ${{ matrix.component.working_dir }}
        run: |
          echo "Building ${{ matrix.component.name }} image for commit: ${{ steps.commit.outputs.short_sha }}"
          
          # Add tags and context
          BUILD_CMD="docker build \
            -t ${{ env.REGISTRY }}/${{ env.REPOSITORY_OWNER }}/${{ matrix.component.image_name }}:latest \
            -t ${{ env.REGISTRY }}/${{ env.REPOSITORY_OWNER }}/${{ matrix.component.image_name }}:${{ steps.commit.outputs.short_sha }} ."
          
          echo "Executing: $BUILD_CMD"
          eval $BUILD_CMD

      - name: Scan Docker image with Trivy - ${{ matrix.component.name }}
        uses: aquasecurity/trivy-action@0.32.0
        if: steps.should_skip.outputs.skip != 'true'
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.REPOSITORY_OWNER }}/${{ matrix.component.image_name }}:latest
          format: table
          severity: CRITICAL,HIGH
          exit-code: '1'
          ignore-unfixed: true

      - name: Push Docker image - ${{ matrix.component.name }}
        if: steps.should_skip.outputs.skip != 'true'
        working-directory: ${{ matrix.component.working_dir }}
        run: |
          echo "Pushing ${{ matrix.component.name }} images for commit: ${{ steps.commit.outputs.short_sha }}"
          docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY_OWNER }}/${{ matrix.component.image_name }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY_OWNER }}/${{ matrix.component.image_name }}:${{ steps.commit.outputs.short_sha }}
